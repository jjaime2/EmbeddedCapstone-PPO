<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Output\DiscoverWIFI.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Output\DiscoverWIFI.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060750: Last Updated: Tue May 26 13:22:12 2020
<BR><P>
<H3>Maximum Stack Usage =       3484 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main_Thread2 &rArr; rf_heart_rate_and_oxygen_saturation &rArr; rf_signal_periodicity &rArr; rf_autocorrelation &rArr; __aeabi_fadd &rArr; _float_epilogue
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[f6]">handleRxSNIC</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[86]">sendFromSock</a><BR>
 <LI><a href="#[2]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2]">HardFault_Handler</a><BR>
 <LI><a href="#[3]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3]">MemManage_Handler</a><BR>
 <LI><a href="#[4]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4]">BusFault_Handler</a><BR>
 <LI><a href="#[5]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5]">UsageFault_Handler</a><BR>
 <LI><a href="#[6]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6]">SVC_Handler</a><BR>
 <LI><a href="#[7]">DebugMon_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[7]">DebugMon_Handler</a><BR>
 <LI><a href="#[1c]">ADC_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1c]">ADC_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[1c]">ADC_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[4]">BusFault_Handler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[1e]">CAN1_RX0_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[1f]">CAN1_RX1_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[20]">CAN1_SCE_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[1d]">CAN1_TX_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[4a]">CAN2_RX0_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[4b]">CAN2_RX1_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[4c]">CAN2_SCE_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[49]">CAN2_TX_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[59]">CRYP_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[58]">DCMI_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[15]">DMA1_Stream0_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[16]">DMA1_Stream1_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[17]">DMA1_Stream2_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[18]">DMA1_Stream3_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[19]">DMA1_Stream4_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[1a]">DMA1_Stream5_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[1b]">DMA1_Stream6_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[39]">DMA1_Stream7_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[42]">DMA2_Stream0_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[43]">DMA2_Stream1_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[44]">DMA2_Stream2_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[45]">DMA2_Stream3_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[46]">DMA2_Stream4_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[4e]">DMA2_Stream5_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[4f]">DMA2_Stream6_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[50]">DMA2_Stream7_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[7]">DebugMon_Handler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[47]">ETH_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[48]">ETH_WKUP_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[10]">EXTI0_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[32]">EXTI15_10_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[11]">EXTI1_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[12]">EXTI2_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[13]">EXTI3_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[14]">EXTI4_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[21]">EXTI9_5_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[e]">FLASH_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[5b]">FPU_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[3a]">FSMC_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[5a]">HASH_RNG_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[2]">HardFault_Handler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[2a]">I2C1_ER_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[29]">I2C1_EV_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[2c]">I2C2_ER_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[2b]">I2C2_EV_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[53]">I2C3_ER_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[52]">I2C3_EV_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[3]">MemManage_Handler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[1]">NMI_Handler</a> from qxk_port.o(.emb_text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[4d]">OTG_FS_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[34]">OTG_FS_WKUP_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[55]">OTG_HS_EP1_IN_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[54]">OTG_HS_EP1_OUT_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[57]">OTG_HS_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[56]">OTG_HS_WKUP_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[b]">PVD_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[8]">PendSV_Handler</a> from qxk_port.o(.emb_text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[70]">QActive_postLIFO_</a> from qf_actq.o(.text) referenced from qf_qact.o(.constdata)
 <LI><a href="#[6f]">QActive_post_</a> from qf_actq.o(.text) referenced from qf_qact.o(.constdata)
 <LI><a href="#[6c]">QActive_start_</a> from qxk.o(.text) referenced 2 times from qf_actq.o(.constdata)
 <LI><a href="#[69]">QHsm_dispatch_</a> from qep_hsm.o(.text) referenced 2 times from qep_hsm.o(.constdata)
 <LI><a href="#[68]">QHsm_init_</a> from qep_hsm.o(.text) referenced 2 times from qep_hsm.o(.constdata)
 <LI><a href="#[10d]">QHsm_top</a> from qep_hsm.o(.text) referenced 2 times from qep_hsm.o(.text)
 <LI><a href="#[6b]">QTicker_dispatch_</a> from qf_actq.o(.text) referenced from qf_actq.o(.constdata)
 <LI><a href="#[6a]">QTicker_init_</a> from qf_actq.o(.text) referenced from qf_actq.o(.constdata)
 <LI><a href="#[6e]">QTicker_postLIFO_</a> from qf_actq.o(.text) referenced from qf_actq.o(.constdata)
 <LI><a href="#[6d]">QTicker_post_</a> from qf_actq.o(.text) referenced from qf_actq.o(.constdata)
 <LI><a href="#[5d]">QXK_activate_</a> from qxk.o(.text) referenced from qxk_port.o(.emb_text)
 <LI><a href="#[61]">QXK_threadRet_</a> from qxk_xthr.o(.text) referenced from qxk_port.o(.text)
 <LI><a href="#[72]">QXThread_dispatch_</a> from qxk_xthr.o(.text) referenced from qxk_xthr.o(.constdata)
 <LI><a href="#[71]">QXThread_init_</a> from qxk_xthr.o(.text) referenced from qxk_xthr.o(.constdata)
 <LI><a href="#[75]">QXThread_postLIFO_</a> from qxk_xthr.o(.text) referenced from qxk_xthr.o(.constdata)
 <LI><a href="#[74]">QXThread_post_</a> from qxk_xthr.o(.text) referenced from qxk_xthr.o(.constdata)
 <LI><a href="#[73]">QXThread_start_</a> from qxk_xthr.o(.text) referenced from qxk_xthr.o(.constdata)
 <LI><a href="#[f]">RCC_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[33]">RTC_Alarm_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[d]">RTC_WKUP_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[0]">Reset_Handler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[3b]">SDIO_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[2d]">SPI1_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[2e]">SPI2_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[3d]">SPI3_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[6]">SVC_Handler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[9]">SysTick_Handler</a> from bsp.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[5f]">SystemInit</a> from system_stm32f4xx.o(.text) referenced from startup_stm32f40xx.o(.text)
 <LI><a href="#[c]">TAMP_STAMP_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[22]">TIM1_BRK_TIM9_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[25]">TIM1_CC_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[24]">TIM1_TRG_COM_TIM11_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[23]">TIM1_UP_TIM10_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[26]">TIM2_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[27]">TIM3_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[28]">TIM4_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[3c]">TIM5_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[40]">TIM6_DAC_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[41]">TIM7_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[35]">TIM8_BRK_TIM12_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[38]">TIM8_CC_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[37]">TIM8_TRG_COM_TIM14_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[36]">TIM8_UP_TIM13_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[5e]">Thread_ret</a> from qxk_port.o(.emb_text) referenced from qxk_port.o(.emb_text)
 <LI><a href="#[3e]">UART4_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[3f]">UART5_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[2f]">USART1_IRQHandler</a> from sn8200_hal.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[30]">USART2_IRQHandler</a> from main.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[31]">USART3_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[51]">USART6_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[5]">UsageFault_Handler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[a]">WWDG_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[63]">__backspace</a> from fgetc_b.o(.text) referenced from scanf_char_file.o(.text)
 <LI><a href="#[60]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_stm32f40xx.o(.text)
 <LI><a href="#[64]">_scanf_char_input</a> from scanf_char.o(.text) referenced from scanf_char.o(.text)
 <LI><a href="#[67]">_sputc</a> from printfa.o(i._sputc) referenced from printfa.o(i.__0sprintf)
 <LI><a href="#[62]">fgetc</a> from main.o(.text) referenced from scanf_char_file.o(.text)
 <LI><a href="#[66]">fputc</a> from main.o(.text) referenced from printfa.o(i.__0printf)
 <LI><a href="#[65]">isspace</a> from isspace_o.o(.text) referenced from scanf_char.o(.text)
 <LI><a href="#[5c]">main</a> from main.o(.text) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
 <LI><a href="#[78]">main_Thread1</a> from main.o(.text) referenced from main.o(.text)
 <LI><a href="#[7c]">main_Thread2</a> from main.o(.text) referenced from main.o(.text)
 <LI><a href="#[88]">main_Thread3</a> from main.o(.text) referenced from main.o(.text)
 <LI><a href="#[8e]">main_Thread4</a> from main.o(.text) referenced from main.o(.text)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[60]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(.text)
</UL>
<P><STRONG><a name="[168]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[76]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[15d]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[169]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[16a]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[16b]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[16c]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[16d]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[8]"></a>PendSV_Handler</STRONG> (Thumb, 152 bytes, Stack size 0 bytes, qxk_port.o(.emb_text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[5e]"></a>Thread_ret</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, qxk_port.o(.emb_text))
<BR>[Address Reference Count : 1]<UL><LI> qxk_port.o(.emb_text)
</UL>
<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, qxk_port.o(.emb_text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[78]"></a>main_Thread1</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = main_Thread1 &rArr; maxim_max30102_read_fifo &rArr; maxim_max30102_read_reg &rArr; I2C_RdBufEasy &rArr; I2C_Read &rArr; WaitSR1FlagsSet &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;maxim_max30102_read_fifo
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QXSemaphore_signal
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_ledBlueToggle
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text)
</UL>
<P><STRONG><a name="[7c]"></a>main_Thread2</STRONG> (Thumb, 274 bytes, Stack size 32 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 3484<LI>Call Chain = main_Thread2 &rArr; rf_heart_rate_and_oxygen_saturation &rArr; rf_signal_periodicity &rArr; rf_autocorrelation &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendFromSock
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_heart_rate_and_oxygen_saturation
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;maxim_max30102_read_temp
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;maxim_max30102_read_fifo
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QXSemaphore_wait
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputData
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_ledRedToggle
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__c89printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text)
</UL>
<P><STRONG><a name="[88]"></a>main_Thread3</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = main_Thread3 &rArr; ProcessSN8200Input &rArr; rx_thread_proc &rArr; process_rx_frame &rArr; sci_ser_cmd_proc &rArr; handleRxSNIC &rArr;  sendFromSock (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SN8200_API_HasInput
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QXThread_delay
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessSN8200Input
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_ledGreenToggle
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text)
</UL>
<P><STRONG><a name="[8e]"></a>main_Thread4</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = main_Thread4 &rArr; QXThread_delay &rArr; QXThread_block_ &rArr; QXK_sched_
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QXThread_delay
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_ledOrangeToggle
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text)
</UL>
<P><STRONG><a name="[90]"></a>DBGU_Init</STRONG> (Thumb, 188 bytes, Stack size 32 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = DBGU_Init &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Cmd
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_PriorityGroupConfig
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[5c]"></a>main</STRONG> (Thumb, 772 bytes, Stack size 24 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = main &rArr; WifiJoin &rArr; ProcessSN8200Input &rArr; rx_thread_proc &rArr; process_rx_frame &rArr; sci_ser_cmd_proc &rArr; handleRxSNIC &rArr;  sendFromSock (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpCreateSocket
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpConnectToServer
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;maxim_max30102_reset
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;maxim_max30102_read_reg
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;maxim_max30102_init
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getTCPinfo
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WifiOn
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WifiJoin
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WifiDisconn
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SnicInit
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SnicIPConfig
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SN8200_API_Init
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Q_onAssert
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QXThread_ctor
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QXSemaphore_init
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QF_run
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QF_init
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_LL_Init
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_LED_Init
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_INT_Init
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_BUTTON_Init
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DBGU_Init
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[16e]"></a>DBGU_RxBufferEmpty</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, main.o(.text), UNUSED)

<P><STRONG><a name="[30]"></a>USART2_IRQHandler</STRONG> (Thumb, 136 bytes, Stack size 8 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USART2_IRQHandler &rArr; USART_GetITStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SendData
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ReceiveData
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetITStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[66]"></a>fputc</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SendData
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetFlagStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printfa.o(i.__0printf)
</UL>
<P><STRONG><a name="[16f]"></a>DBGU_GetChar</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, main.o(.text), UNUSED)

<P><STRONG><a name="[62]"></a>fgetc</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = fgetc
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetFlagStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> scanf_char_file.o(.text)
</UL>
<P><STRONG><a name="[b4]"></a>rf_autocorrelation</STRONG> (Thumb, 84 bytes, Stack size 40 bytes, algorithm_by_rf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = rf_autocorrelation &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_signal_periodicity
</UL>

<P><STRONG><a name="[b9]"></a>rf_signal_periodicity</STRONG> (Thumb, 184 bytes, Stack size 64 bytes, algorithm_by_rf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = rf_signal_periodicity &rArr; rf_autocorrelation &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfrcmple
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmple
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_autocorrelation
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_heart_rate_and_oxygen_saturation
</UL>

<P><STRONG><a name="[bc]"></a>rf_Pcorrelation</STRONG> (Thumb, 84 bytes, Stack size 40 bytes, algorithm_by_rf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = rf_Pcorrelation &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_heart_rate_and_oxygen_saturation
</UL>

<P><STRONG><a name="[bd]"></a>rf_rms</STRONG> (Thumb, 100 bytes, Stack size 48 bytes, algorithm_by_rf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = rf_rms &rArr; sqrt &rArr; _dsqrt &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_heart_rate_and_oxygen_saturation
</UL>

<P><STRONG><a name="[c0]"></a>rf_linear_regression_beta</STRONG> (Thumb, 78 bytes, Stack size 32 bytes, algorithm_by_rf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = rf_linear_regression_beta &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_heart_rate_and_oxygen_saturation
</UL>

<P><STRONG><a name="[81]"></a>rf_heart_rate_and_oxygen_saturation</STRONG> (Thumb, 736 bytes, Stack size 3328 bytes, algorithm_by_rf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 3452<LI>Call Chain = rf_heart_rate_and_oxygen_saturation &rArr; rf_signal_periodicity &rArr; rf_autocorrelation &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_frsub
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfrcmple
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_linear_regression_beta
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_rms
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_Pcorrelation
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_signal_periodicity
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_Thread2
</UL>

<P><STRONG><a name="[cc]"></a>I2C_WrBuf</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, max30102.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = I2C_WrBuf &rArr; I2C_Addr &rArr; WaitSR1FlagsSet &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Start
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Addr
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Write
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitSR1FlagsSet
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitLineIdle
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;maxim_max30102_write_reg
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;maxim_max30102_read_reg
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;maxim_max30102_read_fifo
</UL>

<P><STRONG><a name="[ce]"></a>maxim_max30102_write_reg</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, max30102.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = maxim_max30102_write_reg &rArr; I2C_WrBuf &rArr; I2C_Addr &rArr; WaitSR1FlagsSet &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WrBuf
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;maxim_max30102_reset
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;maxim_max30102_read_temp
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;maxim_max30102_init
</UL>

<P><STRONG><a name="[d0]"></a>I2C_RdBufEasy</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, max30102.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = I2C_RdBufEasy &rArr; I2C_Read &rArr; WaitSR1FlagsSet &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Read
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Start
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Addr
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitLineIdle
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;maxim_max30102_read_reg
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;maxim_max30102_read_fifo
</UL>

<P><STRONG><a name="[a0]"></a>maxim_max30102_read_reg</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, max30102.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = maxim_max30102_read_reg &rArr; I2C_RdBufEasy &rArr; I2C_Read &rArr; WaitSR1FlagsSet &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RdBufEasy
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WrBuf
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;maxim_max30102_read_temp
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;maxim_max30102_read_fifo
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[a1]"></a>maxim_max30102_init</STRONG> (Thumb, 160 bytes, Stack size 8 bytes, max30102.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = maxim_max30102_init &rArr; maxim_max30102_write_reg &rArr; I2C_WrBuf &rArr; I2C_Addr &rArr; WaitSR1FlagsSet &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;maxim_max30102_write_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[80]"></a>maxim_max30102_read_temp</STRONG> (Thumb, 110 bytes, Stack size 56 bytes, max30102.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = maxim_max30102_read_temp &rArr; maxim_max30102_write_reg &rArr; I2C_WrBuf &rArr; I2C_Addr &rArr; WaitSR1FlagsSet &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;maxim_max30102_write_reg
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;maxim_max30102_read_reg
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_Thread2
</UL>

<P><STRONG><a name="[7a]"></a>maxim_max30102_read_fifo</STRONG> (Thumb, 140 bytes, Stack size 32 bytes, max30102.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = maxim_max30102_read_fifo &rArr; maxim_max30102_read_reg &rArr; I2C_RdBufEasy &rArr; I2C_Read &rArr; WaitSR1FlagsSet &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RdBufEasy
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WrBuf
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;maxim_max30102_read_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_Thread2
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_Thread1
</UL>

<P><STRONG><a name="[9f]"></a>maxim_max30102_reset</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, max30102.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = maxim_max30102_reset &rArr; maxim_max30102_write_reg &rArr; I2C_WrBuf &rArr; I2C_Addr &rArr; WaitSR1FlagsSet &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;maxim_max30102_write_reg
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[9a]"></a>I2C_LL_Init</STRONG> (Thumb, 244 bytes, Stack size 32 bytes, max30102.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = I2C_LL_Init &rArr; I2C_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphResetCmd
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Init
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Cmd
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[9b]"></a>GPIO_INT_Init</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, max30102.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = GPIO_INT_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[9c]"></a>GPIO_LED_Init</STRONG> (Thumb, 162 bytes, Stack size 40 bytes, max30102.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = GPIO_LED_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[9d]"></a>GPIO_BUTTON_Init</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, max30102.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = GPIO_BUTTON_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[d4]"></a>I2C_WrData</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, max30102.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Start
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Addr
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitSR1FlagsSet
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitLineIdle
</UL>

<P><STRONG><a name="[d5]"></a>I2C_RdBuf</STRONG> (Thumb, 308 bytes, Stack size 16 bytes, max30102.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Read
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Start
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Addr
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitSR1FlagsSet
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitLineIdle
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RdData
</UL>

<P><STRONG><a name="[d6]"></a>I2C_RdData</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, max30102.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RdBuf
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Start
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Addr
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitSR1FlagsSet
</UL>

<P><STRONG><a name="[ed]"></a>mdelay</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, bsp.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleRxSNIC
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SnicGetDhcp
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ApOnOff
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpCreateSocket
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpConnectToServer
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendFromSock
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WifiJoin
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SnicIPConfig
</UL>

<P><STRONG><a name="[170]"></a>TimingDelay_Decrement</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, bsp.o(.text), UNUSED)

<P><STRONG><a name="[9]"></a>SysTick_Handler</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, bsp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SysTick_Handler &rArr; QF_tickX_
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QXK_sched_
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QF_tickX_
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QF_set_BASEPRI
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[79]"></a>BSP_ledBlueToggle</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, bsp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BSP_ledBlueToggle
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ToggleBits
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QF_set_BASEPRI
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QF_get_BASEPRI
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_Thread1
</UL>

<P><STRONG><a name="[8a]"></a>BSP_ledGreenToggle</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, bsp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BSP_ledGreenToggle
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ToggleBits
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QF_set_BASEPRI
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QF_get_BASEPRI
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_Thread3
</UL>

<P><STRONG><a name="[7e]"></a>BSP_ledRedToggle</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, bsp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BSP_ledRedToggle
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ToggleBits
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QF_set_BASEPRI
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QF_get_BASEPRI
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_Thread2
</UL>

<P><STRONG><a name="[8f]"></a>BSP_ledOrangeToggle</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, bsp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BSP_ledOrangeToggle
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ToggleBits
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QF_set_BASEPRI
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QF_get_BASEPRI
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_Thread4
</UL>

<P><STRONG><a name="[dc]"></a>QF_onStartup</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, bsp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = QF_onStartup &rArr; SystemCoreClockUpdate
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QF_run
</UL>

<P><STRONG><a name="[134]"></a>QF_onCleanup</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, bsp.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QF_stop
</UL>

<P><STRONG><a name="[137]"></a>QXK_onIdle</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, bsp.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QF_run
</UL>

<P><STRONG><a name="[ae]"></a>Q_onAssert</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, bsp.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QXK_sched_
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QF_tickX_
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QXThread_delay
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QXSemaphore_wait
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QXSemaphore_signal
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QXSemaphore_init
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QXK_threadRet_
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QXThread_block_
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QXThread_queueGet
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QXThread_postLIFO_
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QXThread_post_
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QXThread_start_
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QXThread_dispatch_
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QXThread_init_
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QXSemaphore_tryWait
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QXThread_teArm_
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QXK_current
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QTimeEvt_rearm
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QTimeEvt_armX
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QTimeEvt_ctorX
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QEQueue_postLIFO
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QXK_schedUnlock
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QXK_schedLock
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QF_getPoolMin
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QMPool_put
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QMPool_init
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QMPool_get
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QF_newRef_
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QF_newX_
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QF_poolInit
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QEQueue_post
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QEQueue_get
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QXK_activate_
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QF_gc
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QActive_start_
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QF_getQueueMin
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QActive_get_
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QActive_postLIFO_
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QActive_post_
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QTicker_postLIFO_
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QF_remove_
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QF_add_
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QHsm_childState_
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QHsm_isIn
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QHsm_dispatch_
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QHsm_init_
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QHsm_tran_
</UL>

<P><STRONG><a name="[de]"></a>SN8200_HAL_Init</STRONG> (Thumb, 186 bytes, Stack size 40 bytes, sn8200_hal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = SN8200_HAL_Init &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Cmd
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_PriorityGroupConfig
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SN8200_Init
</UL>

<P><STRONG><a name="[e0]"></a>SN8200_HAL_SendData</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, sn8200_hal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SN8200_HAL_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SendData
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dummy_tx
</UL>

<P><STRONG><a name="[ff]"></a>SN8200_HAL_RxBufferEmpty</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, sn8200_hal.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_thread_proc
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SN8200_HasInput
</UL>

<P><STRONG><a name="[101]"></a>SN8200_HAL_ReadByte</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, sn8200_hal.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_thread_proc
</UL>

<P><STRONG><a name="[2f]"></a>USART1_IRQHandler</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, sn8200_hal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USART1_IRQHandler &rArr; USART_GetITStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ReceiveData
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetITStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[e1]"></a>inet_aton</STRONG> (Thumb, 338 bytes, Stack size 48 bytes, sn8200_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = inet_aton
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_addr
</UL>

<P><STRONG><a name="[e3]"></a>inet_addr</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, sn8200_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = inet_addr &rArr; inet_aton
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_aton
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getTCPinfo
</UL>

<P><STRONG><a name="[a8]"></a>getTCPinfo</STRONG> (Thumb, 172 bytes, Stack size 48 bytes, sn8200_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = getTCPinfo &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_addr
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[e5]"></a>setTCPinfo</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, sn8200_api.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0scanf
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[9e]"></a>SN8200_API_Init</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, sn8200_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = SN8200_API_Init &rArr; SN8200_Init &rArr; SN8200_HAL_Init &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SN8200_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[8b]"></a>SN8200_API_HasInput</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, sn8200_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SN8200_API_HasInput &rArr; SN8200_HasInput
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SN8200_HasInput
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SnicGetDhcp
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ApOnOff
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpCreateSocket
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpConnectToServer
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendFromSock
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WifiJoin
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SnicIPConfig
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_Thread3
</UL>

<P><STRONG><a name="[a2]"></a>WifiOn</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, sn8200_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = WifiOn &rArr; serial_transmit &rArr; no_ESC_transmit &rArr; escape_payload_and_transmit_no_ESC &rArr; dummy_tx &rArr; SN8200_HAL_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_transmit
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ea]"></a>WifiOff</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, sn8200_api.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_transmit
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[8c]"></a>ProcessSN8200Input</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, sn8200_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = ProcessSN8200Input &rArr; rx_thread_proc &rArr; process_rx_frame &rArr; sci_ser_cmd_proc &rArr; handleRxSNIC &rArr;  sendFromSock (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_thread_proc
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SnicGetDhcp
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ApOnOff
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpCreateSocket
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpConnectToServer
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendFromSock
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WifiJoin
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SnicIPConfig
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_Thread3
</UL>

<P><STRONG><a name="[ec]"></a>ApOnOff</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, sn8200_api.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_transmit
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdelay
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SN8200_API_HasInput
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessSN8200Input
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[a4]"></a>WifiJoin</STRONG> (Thumb, 284 bytes, Stack size 152 bytes, sn8200_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = WifiJoin &rArr; ProcessSN8200Input &rArr; rx_thread_proc &rArr; process_rx_frame &rArr; sci_ser_cmd_proc &rArr; handleRxSNIC &rArr;  sendFromSock (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_transmit
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdelay
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SN8200_API_HasInput
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessSN8200Input
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0scanf
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[a3]"></a>WifiDisconn</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, sn8200_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = WifiDisconn &rArr; serial_transmit &rArr; no_ESC_transmit &rArr; escape_payload_and_transmit_no_ESC &rArr; dummy_tx &rArr; SN8200_HAL_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_transmit
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[a5]"></a>SnicInit</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, sn8200_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = SnicInit &rArr; serial_transmit &rArr; no_ESC_transmit &rArr; escape_payload_and_transmit_no_ESC &rArr; dummy_tx &rArr; SN8200_HAL_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_transmit
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[f0]"></a>SnicCleanup</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, sn8200_api.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_transmit
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[a6]"></a>SnicIPConfig</STRONG> (Thumb, 526 bytes, Stack size 24 bytes, sn8200_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = SnicIPConfig &rArr; ProcessSN8200Input &rArr; rx_thread_proc &rArr; process_rx_frame &rArr; sci_ser_cmd_proc &rArr; handleRxSNIC &rArr;  sendFromSock (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_transmit
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdelay
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SN8200_API_HasInput
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessSN8200Input
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[f1]"></a>SnicGetDhcp</STRONG> (Thumb, 134 bytes, Stack size 16 bytes, sn8200_api.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_transmit
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdelay
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SN8200_API_HasInput
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessSN8200Input
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0scanf
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[a7]"></a>tcpCreateSocket</STRONG> (Thumb, 136 bytes, Stack size 48 bytes, sn8200_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = tcpCreateSocket &rArr; ProcessSN8200Input &rArr; rx_thread_proc &rArr; process_rx_frame &rArr; sci_ser_cmd_proc &rArr; handleRxSNIC &rArr;  sendFromSock (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_transmit
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdelay
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SN8200_API_HasInput
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessSN8200Input
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[f2]"></a>closeSocket</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, sn8200_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = closeSocket &rArr; serial_transmit &rArr; no_ESC_transmit &rArr; escape_payload_and_transmit_no_ESC &rArr; dummy_tx &rArr; SN8200_HAL_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_transmit
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleRxSNIC
</UL>

<P><STRONG><a name="[a9]"></a>tcpConnectToServer</STRONG> (Thumb, 148 bytes, Stack size 48 bytes, sn8200_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = tcpConnectToServer &rArr; ProcessSN8200Input &rArr; rx_thread_proc &rArr; process_rx_frame &rArr; sci_ser_cmd_proc &rArr; handleRxSNIC &rArr;  sendFromSock (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_transmit
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdelay
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SN8200_API_HasInput
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessSN8200Input
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[f3]"></a>tcpCreateConnection</STRONG> (Thumb, 100 bytes, Stack size 40 bytes, sn8200_api.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_transmit
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[86]"></a>sendFromSock</STRONG> (Thumb, 136 bytes, Stack size 2088 bytes, sn8200_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 2328<LI>Call Chain = sendFromSock &rArr; ProcessSN8200Input &rArr; rx_thread_proc &rArr; process_rx_frame &rArr; sci_ser_cmd_proc &rArr; handleRxSNIC &rArr;  sendFromSock (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_transmit
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdelay
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SN8200_API_HasInput
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessSN8200Input
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleRxSNIC
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_Thread2
</UL>

<P><STRONG><a name="[f4]"></a>handleRxWiFi</STRONG> (Thumb, 938 bytes, Stack size 64 bytes, sn8200_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = handleRxWiFi &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sci_ser_cmd_proc
</UL>

<P><STRONG><a name="[f6]"></a>handleRxSNIC</STRONG> (Thumb, 1502 bytes, Stack size 64 bytes, sn8200_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + In Cycle
<LI>Call Chain = handleRxSNIC &rArr;  sendFromSock (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;closeSocket
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdelay
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendFromSock
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sci_ser_cmd_proc
</UL>

<P><STRONG><a name="[f9]"></a>dummy_tx</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, sn8200_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = dummy_tx &rArr; SN8200_HAL_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SN8200_HAL_SendData
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;no_ESC_transmit
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;escape_payload_and_transmit_no_ESC
</UL>

<P><STRONG><a name="[102]"></a>rx_process_char_no_ESC</STRONG> (Thumb, 658 bytes, Stack size 16 bytes, sn8200_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rx_process_char_no_ESC
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_thread_proc
</UL>

<P><STRONG><a name="[fd]"></a>sci_ser_cmd_proc</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, sn8200_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = sci_ser_cmd_proc &rArr; handleRxSNIC &rArr;  sendFromSock (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleRxSNIC
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleRxWiFi
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_rx_frame
</UL>

<P><STRONG><a name="[103]"></a>SN8200_RxFrameEmpty</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, sn8200_core.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_thread_proc
</UL>

<P><STRONG><a name="[fe]"></a>process_rx_frame</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, sn8200_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = process_rx_frame &rArr; sci_ser_cmd_proc &rArr; handleRxSNIC &rArr;  sendFromSock (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sci_ser_cmd_proc
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_thread_proc
</UL>

<P><STRONG><a name="[e7]"></a>SN8200_Init</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, sn8200_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = SN8200_Init &rArr; SN8200_HAL_Init &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SN8200_HAL_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SN8200_API_Init
</UL>

<P><STRONG><a name="[e8]"></a>SN8200_HasInput</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, sn8200_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SN8200_HasInput
</UL>
<BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SN8200_HAL_RxBufferEmpty
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SN8200_API_HasInput
</UL>

<P><STRONG><a name="[e9]"></a>serial_transmit</STRONG> (Thumb, 50 bytes, Stack size 32 bytes, sn8200_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = serial_transmit &rArr; no_ESC_transmit &rArr; escape_payload_and_transmit_no_ESC &rArr; dummy_tx &rArr; SN8200_HAL_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;no_ESC_transmit
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_escaped_payload_len_no_ESC
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpCreateConnection
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;closeSocket
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SnicGetDhcp
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SnicCleanup
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ApOnOff
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WifiOff
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpCreateSocket
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpConnectToServer
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendFromSock
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WifiOn
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WifiJoin
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WifiDisconn
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SnicInit
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SnicIPConfig
</UL>

<P><STRONG><a name="[eb]"></a>rx_thread_proc</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, sn8200_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = rx_thread_proc &rArr; process_rx_frame &rArr; sci_ser_cmd_proc &rArr; handleRxSNIC &rArr;  sendFromSock (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_rx_frame
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SN8200_RxFrameEmpty
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_process_char_no_ESC
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SN8200_HAL_ReadByte
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SN8200_HAL_RxBufferEmpty
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessSN8200Input
</UL>

<P><STRONG><a name="[95]"></a>NVIC_PriorityGroupConfig</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, misc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SN8200_HAL_Init
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DBGU_Init
</UL>

<P><STRONG><a name="[96]"></a>NVIC_Init</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, misc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SN8200_HAL_Init
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DBGU_Init
</UL>

<P><STRONG><a name="[171]"></a>NVIC_SetVectorTable</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, misc.o(.text), UNUSED)

<P><STRONG><a name="[172]"></a>NVIC_SystemLPConfig</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, misc.o(.text), UNUSED)

<P><STRONG><a name="[173]"></a>SysTick_CLKSourceConfig</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, misc.o(.text), UNUSED)

<P><STRONG><a name="[104]"></a>GPIO_DeInit</STRONG> (Thumb, 220 bytes, Stack size 8 bytes, stm32f4xx_gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphResetCmd
</UL>

<P><STRONG><a name="[94]"></a>GPIO_Init</STRONG> (Thumb, 144 bytes, Stack size 20 bytes, stm32f4xx_gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SN8200_HAL_Init
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_LL_Init
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_LED_Init
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_INT_Init
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_BUTTON_Init
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DBGU_Init
</UL>

<P><STRONG><a name="[174]"></a>GPIO_StructInit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_gpio.o(.text), UNUSED)

<P><STRONG><a name="[175]"></a>GPIO_PinLockConfig</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, stm32f4xx_gpio.o(.text), UNUSED)

<P><STRONG><a name="[176]"></a>GPIO_ReadInputDataBit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_gpio.o(.text), UNUSED)

<P><STRONG><a name="[7f]"></a>GPIO_ReadInputData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_gpio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_Thread2
</UL>

<P><STRONG><a name="[177]"></a>GPIO_ReadOutputDataBit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_gpio.o(.text), UNUSED)

<P><STRONG><a name="[178]"></a>GPIO_ReadOutputData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_gpio.o(.text), UNUSED)

<P><STRONG><a name="[179]"></a>GPIO_SetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_gpio.o(.text), UNUSED)

<P><STRONG><a name="[17a]"></a>GPIO_ResetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_gpio.o(.text), UNUSED)

<P><STRONG><a name="[17b]"></a>GPIO_WriteBit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f4xx_gpio.o(.text), UNUSED)

<P><STRONG><a name="[17c]"></a>GPIO_Write</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_gpio.o(.text), UNUSED)

<P><STRONG><a name="[db]"></a>GPIO_ToggleBits</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_gpio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_ledRedToggle
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_ledOrangeToggle
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_ledGreenToggle
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_ledBlueToggle
</UL>

<P><STRONG><a name="[93]"></a>GPIO_PinAFConfig</STRONG> (Thumb, 70 bytes, Stack size 20 bytes, stm32f4xx_gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = GPIO_PinAFConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SN8200_HAL_Init
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_LL_Init
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DBGU_Init
</UL>

<P><STRONG><a name="[17d]"></a>RCC_DeInit</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[17e]"></a>RCC_HSEConfig</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[107]"></a>RCC_GetFlagStatus</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, stm32f4xx_rcc.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_WaitForHSEStartUp
</UL>

<P><STRONG><a name="[106]"></a>RCC_WaitForHSEStartUp</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, stm32f4xx_rcc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetFlagStatus
</UL>

<P><STRONG><a name="[17f]"></a>RCC_AdjustHSICalibrationValue</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[180]"></a>RCC_HSICmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[181]"></a>RCC_LSEConfig</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[182]"></a>RCC_LSICmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[183]"></a>RCC_PLLConfig</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[184]"></a>RCC_PLLCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[185]"></a>RCC_PLLI2SConfig</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[186]"></a>RCC_PLLI2SCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[187]"></a>RCC_ClockSecuritySystemCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[188]"></a>RCC_MCO1Config</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[189]"></a>RCC_MCO2Config</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[18a]"></a>RCC_SYSCLKConfig</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[18b]"></a>RCC_GetSYSCLKSource</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[18c]"></a>RCC_HCLKConfig</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[18d]"></a>RCC_PCLK1Config</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[18e]"></a>RCC_PCLK2Config</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[10a]"></a>RCC_GetClocksFreq</STRONG> (Thumb, 222 bytes, Stack size 20 bytes, stm32f4xx_rcc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Init
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
</UL>

<P><STRONG><a name="[18f]"></a>RCC_RTCCLKConfig</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[190]"></a>RCC_RTCCLKCmd</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[191]"></a>RCC_BackupResetCmd</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[192]"></a>RCC_I2SCLKConfig</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[193]"></a>RCC_TIMCLKPresConfig</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[91]"></a>RCC_AHB1PeriphClockCmd</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SN8200_HAL_Init
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_LL_Init
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_LED_Init
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_INT_Init
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_BUTTON_Init
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DBGU_Init
</UL>

<P><STRONG><a name="[194]"></a>RCC_AHB2PeriphClockCmd</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[195]"></a>RCC_AHB3PeriphClockCmd</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[92]"></a>RCC_APB1PeriphClockCmd</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_LL_Init
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DBGU_Init
</UL>

<P><STRONG><a name="[df]"></a>RCC_APB2PeriphClockCmd</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SN8200_HAL_Init
</UL>

<P><STRONG><a name="[105]"></a>RCC_AHB1PeriphResetCmd</STRONG> (Thumb, 84 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_DeInit
</UL>

<P><STRONG><a name="[196]"></a>RCC_AHB2PeriphResetCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[197]"></a>RCC_AHB3PeriphResetCmd</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[d1]"></a>RCC_APB1PeriphResetCmd</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_DeInit
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DeInit
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_LL_Init
</UL>

<P><STRONG><a name="[109]"></a>RCC_APB2PeriphResetCmd</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DeInit
</UL>

<P><STRONG><a name="[198]"></a>RCC_AHB1PeriphClockLPModeCmd</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[199]"></a>RCC_AHB2PeriphClockLPModeCmd</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[19a]"></a>RCC_AHB3PeriphClockLPModeCmd</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[19b]"></a>RCC_APB1PeriphClockLPModeCmd</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[19c]"></a>RCC_APB2PeriphClockLPModeCmd</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[19d]"></a>RCC_ITConfig</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[19e]"></a>RCC_ClearFlag</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[19f]"></a>RCC_GetITStatus</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[1a0]"></a>RCC_ClearITPendingBit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[108]"></a>USART_DeInit</STRONG> (Thumb, 206 bytes, Stack size 8 bytes, stm32f4xx_usart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphResetCmd
</UL>

<P><STRONG><a name="[97]"></a>USART_Init</STRONG> (Thumb, 204 bytes, Stack size 48 bytes, stm32f4xx_usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SN8200_HAL_Init
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DBGU_Init
</UL>

<P><STRONG><a name="[1a1]"></a>USART_StructInit</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[1a2]"></a>USART_ClockInit</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, stm32f4xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[1a3]"></a>USART_ClockStructInit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f4xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[99]"></a>USART_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_usart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SN8200_HAL_Init
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DBGU_Init
</UL>

<P><STRONG><a name="[1a4]"></a>USART_SetPrescaler</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f4xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[1a5]"></a>USART_OverSampling8Cmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f4xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[1a6]"></a>USART_OneBitMethodCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[b2]"></a>USART_SendData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_usart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SN8200_HAL_SendData
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
</UL>

<P><STRONG><a name="[b1]"></a>USART_ReceiveData</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f4xx_usart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
</UL>

<P><STRONG><a name="[1a7]"></a>USART_SetAddress</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[1a8]"></a>USART_ReceiverWakeUpCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[1a9]"></a>USART_WakeUpConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[1aa]"></a>USART_LINBreakDetectLengthConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[1ab]"></a>USART_LINCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[1ac]"></a>USART_SendBreak</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f4xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[1ad]"></a>USART_HalfDuplexCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[1ae]"></a>USART_SetGuardTime</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f4xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[1af]"></a>USART_SmartCardCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[1b0]"></a>USART_SmartCardNACKCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[1b1]"></a>USART_IrDAConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[1b2]"></a>USART_IrDACmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[1b3]"></a>USART_DMACmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[98]"></a>USART_ITConfig</STRONG> (Thumb, 74 bytes, Stack size 20 bytes, stm32f4xx_usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = USART_ITConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SN8200_HAL_Init
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DBGU_Init
</UL>

<P><STRONG><a name="[b3]"></a>USART_GetFlagStatus</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4xx_usart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SN8200_HAL_SendData
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fgetc
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>

<P><STRONG><a name="[1b4]"></a>USART_ClearFlag</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[b0]"></a>USART_GetITStatus</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, stm32f4xx_usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USART_GetITStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
</UL>

<P><STRONG><a name="[1b5]"></a>USART_ClearITPendingBit</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, stm32f4xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[10b]"></a>I2C_DeInit</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, stm32f4xx_i2c.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphResetCmd
</UL>

<P><STRONG><a name="[d2]"></a>I2C_Init</STRONG> (Thumb, 218 bytes, Stack size 48 bytes, stm32f4xx_i2c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = I2C_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_LL_Init
</UL>

<P><STRONG><a name="[1b6]"></a>I2C_StructInit</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, stm32f4xx_i2c.o(.text), UNUSED)

<P><STRONG><a name="[d3]"></a>I2C_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_i2c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_LL_Init
</UL>

<P><STRONG><a name="[1b7]"></a>I2C_AnalogFilterCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_i2c.o(.text), UNUSED)

<P><STRONG><a name="[1b8]"></a>I2C_DigitalFilterConfig</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f4xx_i2c.o(.text), UNUSED)

<P><STRONG><a name="[1b9]"></a>I2C_GenerateSTART</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_i2c.o(.text), UNUSED)

<P><STRONG><a name="[1ba]"></a>I2C_GenerateSTOP</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_i2c.o(.text), UNUSED)

<P><STRONG><a name="[1bb]"></a>I2C_Send7bitAddress</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f4xx_i2c.o(.text), UNUSED)

<P><STRONG><a name="[1bc]"></a>I2C_AcknowledgeConfig</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_i2c.o(.text), UNUSED)

<P><STRONG><a name="[1bd]"></a>I2C_OwnAddress2Config</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f4xx_i2c.o(.text), UNUSED)

<P><STRONG><a name="[1be]"></a>I2C_DualAddressCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_i2c.o(.text), UNUSED)

<P><STRONG><a name="[1bf]"></a>I2C_GeneralCallCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_i2c.o(.text), UNUSED)

<P><STRONG><a name="[1c0]"></a>I2C_SoftwareResetCmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f4xx_i2c.o(.text), UNUSED)

<P><STRONG><a name="[1c1]"></a>I2C_StretchClockCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_i2c.o(.text), UNUSED)

<P><STRONG><a name="[1c2]"></a>I2C_FastModeDutyCycleConfig</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm32f4xx_i2c.o(.text), UNUSED)

<P><STRONG><a name="[1c3]"></a>I2C_NACKPositionConfig</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm32f4xx_i2c.o(.text), UNUSED)

<P><STRONG><a name="[1c4]"></a>I2C_SMBusAlertConfig</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm32f4xx_i2c.o(.text), UNUSED)

<P><STRONG><a name="[1c5]"></a>I2C_ARPCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_i2c.o(.text), UNUSED)

<P><STRONG><a name="[1c6]"></a>I2C_SendData</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_i2c.o(.text), UNUSED)

<P><STRONG><a name="[1c7]"></a>I2C_ReceiveData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_i2c.o(.text), UNUSED)

<P><STRONG><a name="[1c8]"></a>I2C_TransmitPEC</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_i2c.o(.text), UNUSED)

<P><STRONG><a name="[1c9]"></a>I2C_PECPositionConfig</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm32f4xx_i2c.o(.text), UNUSED)

<P><STRONG><a name="[1ca]"></a>I2C_CalculatePEC</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_i2c.o(.text), UNUSED)

<P><STRONG><a name="[1cb]"></a>I2C_GetPEC</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_i2c.o(.text), UNUSED)

<P><STRONG><a name="[1cc]"></a>I2C_DMACmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_i2c.o(.text), UNUSED)

<P><STRONG><a name="[1cd]"></a>I2C_DMALastTransferCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_i2c.o(.text), UNUSED)

<P><STRONG><a name="[1ce]"></a>I2C_ReadRegister</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, stm32f4xx_i2c.o(.text), UNUSED)

<P><STRONG><a name="[1cf]"></a>I2C_ITConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_i2c.o(.text), UNUSED)

<P><STRONG><a name="[1d0]"></a>I2C_CheckEvent</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, stm32f4xx_i2c.o(.text), UNUSED)

<P><STRONG><a name="[1d1]"></a>I2C_GetLastEvent</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, stm32f4xx_i2c.o(.text), UNUSED)

<P><STRONG><a name="[1d2]"></a>I2C_GetFlagStatus</STRONG> (Thumb, 84 bytes, Stack size 12 bytes, stm32f4xx_i2c.o(.text), UNUSED)

<P><STRONG><a name="[1d3]"></a>I2C_ClearFlag</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f4xx_i2c.o(.text), UNUSED)

<P><STRONG><a name="[1d4]"></a>I2C_GetITStatus</STRONG> (Thumb, 38 bytes, Stack size 12 bytes, stm32f4xx_i2c.o(.text), UNUSED)

<P><STRONG><a name="[1d5]"></a>I2C_ClearITPendingBit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f4xx_i2c.o(.text), UNUSED)

<P><STRONG><a name="[5f]"></a>SystemInit</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, system_stm32f4xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SystemInit &rArr; SetSysClock
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(.text)
</UL>
<P><STRONG><a name="[dd]"></a>SystemCoreClockUpdate</STRONG> (Thumb, 174 bytes, Stack size 16 bytes, system_stm32f4xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SystemCoreClockUpdate
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QF_onStartup
</UL>

<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[3]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[4]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>ADC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>CAN1_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>CAN1_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>CAN1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>CAN2_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>CAN2_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>CAN2_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>CAN2_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[59]"></a>CRYP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[58]"></a>DCMI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>DMA1_Stream0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>DMA1_Stream1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>DMA1_Stream2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>DMA1_Stream3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>DMA1_Stream4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>DMA1_Stream5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>DMA1_Stream6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>DMA1_Stream7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>DMA2_Stream0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>DMA2_Stream1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>DMA2_Stream2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>DMA2_Stream3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>DMA2_Stream4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>DMA2_Stream5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>DMA2_Stream6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>DMA2_Stream7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>ETH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>ETH_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[5b]"></a>FPU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>FSMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[5a]"></a>HASH_RNG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[53]"></a>I2C3_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[52]"></a>I2C3_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>OTG_FS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>OTG_FS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[55]"></a>OTG_HS_EP1_IN_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[54]"></a>OTG_HS_EP1_OUT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[57]"></a>OTG_HS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[56]"></a>OTG_HS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>RTC_Alarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>RTC_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>SDIO_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>TAMP_STAMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>TIM1_BRK_TIM9_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>TIM1_TRG_COM_TIM11_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>TIM1_UP_TIM10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>TIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>TIM5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>TIM6_DAC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>TIM7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>TIM8_BRK_TIM12_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>TIM8_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>TIM8_TRG_COM_TIM14_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>TIM8_UP_TIM13_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>UART4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>UART5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>USART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[51]"></a>USART6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[10d]"></a>QHsm_top</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, qep_hsm.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> qep_hsm.o(.text)
</UL>
<P><STRONG><a name="[126]"></a>QHsm_ctor</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, qep_hsm.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QActive_ctor
</UL>

<P><STRONG><a name="[68]"></a>QHsm_init_</STRONG> (Thumb, 170 bytes, Stack size 48 bytes, qep_hsm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = QHsm_init_
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Q_onAssert
</UL>
<BR>[Address Reference Count : 2]<UL><LI> qep_hsm.o(.constdata)
<LI> qf_qact.o(.constdata)
</UL>
<P><STRONG><a name="[69]"></a>QHsm_dispatch_</STRONG> (Thumb, 258 bytes, Stack size 56 bytes, qep_hsm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = QHsm_dispatch_ &rArr; QHsm_tran_
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Q_onAssert
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QHsm_tran_
</UL>
<BR>[Address Reference Count : 2]<UL><LI> qep_hsm.o(.constdata)
<LI> qf_qact.o(.constdata)
</UL>
<P><STRONG><a name="[10f]"></a>QHsm_isIn</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, qep_hsm.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Q_onAssert
</UL>

<P><STRONG><a name="[110]"></a>QHsm_childState_</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, qep_hsm.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Q_onAssert
</UL>

<P><STRONG><a name="[111]"></a>QF_add_</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, qf_act.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = QF_add_
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Q_onAssert
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QF_set_BASEPRI
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QXThread_start_
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QActive_start_
</UL>

<P><STRONG><a name="[113]"></a>QF_remove_</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, qf_act.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Q_onAssert
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QF_set_BASEPRI
</UL>

<P><STRONG><a name="[125]"></a>QF_bzero</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, qf_act.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = QF_bzero
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QF_init
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QActive_ctor
</UL>

<P><STRONG><a name="[6f]"></a>QActive_post_</STRONG> (Thumb, 232 bytes, Stack size 32 bytes, qf_actq.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = QActive_post_ &rArr; QXK_activate_ &rArr; QF_gc &rArr; QMPool_put
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QXK_sched_
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Q_onAssert
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QXK_activate_
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QF_gc
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QF_set_BASEPRI
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QF_get_BASEPRI
</UL>
<BR>[Address Reference Count : 1]<UL><LI> qf_qact.o(.constdata)
</UL>
<P><STRONG><a name="[70]"></a>QActive_postLIFO_</STRONG> (Thumb, 172 bytes, Stack size 24 bytes, qf_actq.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = QActive_postLIFO_ &rArr; QXK_activate_ &rArr; QF_gc &rArr; QMPool_put
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QXK_sched_
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Q_onAssert
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QXK_activate_
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QF_set_BASEPRI
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QF_get_BASEPRI
</UL>
<BR>[Address Reference Count : 1]<UL><LI> qf_qact.o(.constdata)
</UL>
<P><STRONG><a name="[117]"></a>QActive_get_</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, qf_actq.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = QActive_get_
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Q_onAssert
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QF_set_BASEPRI
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QF_get_BASEPRI
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QXK_activate_
</UL>

<P><STRONG><a name="[118]"></a>QF_getQueueMin</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, qf_actq.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Q_onAssert
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QF_set_BASEPRI
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QF_get_BASEPRI
</UL>

<P><STRONG><a name="[119]"></a>QTicker_ctor</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, qf_actq.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QActive_ctor
</UL>

<P><STRONG><a name="[11b]"></a>QF_poolInit</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, qf_dyn.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Q_onAssert
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QMPool_init
</UL>

<P><STRONG><a name="[11d]"></a>QF_newX_</STRONG> (Thumb, 138 bytes, Stack size 24 bytes, qf_dyn.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Q_onAssert
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QMPool_get
</UL>

<P><STRONG><a name="[116]"></a>QF_gc</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, qf_dyn.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = QF_gc &rArr; QMPool_put
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Q_onAssert
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QMPool_put
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QF_set_BASEPRI
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QXThread_post_
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QF_deleteRef_
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QXK_activate_
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QActive_post_
</UL>

<P><STRONG><a name="[121]"></a>QF_newRef_</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, qf_dyn.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Q_onAssert
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QF_set_BASEPRI
</UL>

<P><STRONG><a name="[122]"></a>QF_deleteRef_</STRONG> (Thumb, 14 bytes, Stack size 16 bytes, qf_dyn.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QF_gc
</UL>

<P><STRONG><a name="[1d6]"></a>QF_poolGetMaxBlockSize</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, qf_dyn.o(.text), UNUSED)

<P><STRONG><a name="[11c]"></a>QMPool_init</STRONG> (Thumb, 138 bytes, Stack size 32 bytes, qf_mem.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Q_onAssert
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QF_poolInit
</UL>

<P><STRONG><a name="[120]"></a>QMPool_put</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, qf_mem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = QMPool_put
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Q_onAssert
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QF_set_BASEPRI
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QF_gc
</UL>

<P><STRONG><a name="[11e]"></a>QMPool_get</STRONG> (Thumb, 170 bytes, Stack size 24 bytes, qf_mem.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Q_onAssert
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QF_set_BASEPRI
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QF_newX_
</UL>

<P><STRONG><a name="[124]"></a>QF_getPoolMin</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, qf_mem.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Q_onAssert
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QF_set_BASEPRI
</UL>

<P><STRONG><a name="[11a]"></a>QActive_ctor</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, qf_qact.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = QActive_ctor &rArr; QF_bzero
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QF_bzero
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QHsm_ctor
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QXThread_ctor
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QTicker_ctor
</UL>

<P><STRONG><a name="[138]"></a>QEQueue_init</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, qf_qeq.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QXThread_start_
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QActive_start_
</UL>

<P><STRONG><a name="[127]"></a>QEQueue_post</STRONG> (Thumb, 170 bytes, Stack size 32 bytes, qf_qeq.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Q_onAssert
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QF_set_BASEPRI
</UL>

<P><STRONG><a name="[129]"></a>QEQueue_postLIFO</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, qf_qeq.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Q_onAssert
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QF_set_BASEPRI
</UL>

<P><STRONG><a name="[12a]"></a>QEQueue_get</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, qf_qeq.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Q_onAssert
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QF_set_BASEPRI
</UL>

<P><STRONG><a name="[d7]"></a>QF_tickX_</STRONG> (Thumb, 238 bytes, Stack size 24 bytes, qf_time.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = QF_tickX_
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Q_onAssert
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QF_set_BASEPRI
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QF_get_BASEPRI
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QTicker_dispatch_
</UL>

<P><STRONG><a name="[1d7]"></a>QF_noTimeEvtsActiveX</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, qf_time.o(.text), UNUSED)

<P><STRONG><a name="[12d]"></a>QTimeEvt_ctorX</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, qf_time.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = QTimeEvt_ctorX
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Q_onAssert
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QXThread_ctor
</UL>

<P><STRONG><a name="[12e]"></a>QTimeEvt_armX</STRONG> (Thumb, 126 bytes, Stack size 32 bytes, qf_time.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Q_onAssert
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QF_set_BASEPRI
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QF_get_BASEPRI
</UL>

<P><STRONG><a name="[12f]"></a>QTimeEvt_disarm</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, qf_time.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QF_set_BASEPRI
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QF_get_BASEPRI
</UL>

<P><STRONG><a name="[130]"></a>QTimeEvt_rearm</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, qf_time.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Q_onAssert
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QF_set_BASEPRI
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QF_get_BASEPRI
</UL>

<P><STRONG><a name="[1d8]"></a>QTimeEvt_wasDisarmed</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, qf_time.o(.text), UNUSED)

<P><STRONG><a name="[131]"></a>QTimeEvt_currCtr</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, qf_time.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QF_set_BASEPRI
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QF_get_BASEPRI
</UL>

<P><STRONG><a name="[ab]"></a>QF_init</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, qxk.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = QF_init &rArr; QF_bzero
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QXK_init
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QF_bzero
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[133]"></a>QF_stop</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, qxk.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QF_onCleanup
</UL>

<P><STRONG><a name="[5d]"></a>QXK_activate_</STRONG> (Thumb, 230 bytes, Stack size 24 bytes, qxk.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = QXK_activate_ &rArr; QF_gc &rArr; QMPool_put
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Q_onAssert
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QF_set_BASEPRI
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QF_gc
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QActive_get_
</UL>
<BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initial_events
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QXK_schedUnlock
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QActive_start_
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QActive_postLIFO_
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QActive_post_
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QTicker_post_
</UL>
<BR>[Address Reference Count : 1]<UL><LI> qxk_port.o(.emb_text)
</UL>
<P><STRONG><a name="[d9]"></a>QXK_sched_</STRONG> (Thumb, 158 bytes, Stack size 16 bytes, qxk.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = QXK_sched_
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Q_onAssert
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QXSemaphore_wait
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QXSemaphore_signal
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QXK_threadRet_
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QXThread_block_
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QXThread_queueGet
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QXThread_unblock_
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QXThread_post_
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QXThread_start_
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initial_events
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QXK_schedUnlock
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QActive_start_
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QActive_postLIFO_
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QActive_post_
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QTicker_post_
</UL>

<P><STRONG><a name="[af]"></a>QF_run</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, qxk.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = QF_run &rArr; initial_events &rArr; QXK_activate_ &rArr; QF_gc &rArr; QMPool_put
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QXK_onIdle
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QF_onStartup
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QF_set_BASEPRI
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initial_events
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[6c]"></a>QActive_start_</STRONG> (Thumb, 160 bytes, Stack size 40 bytes, qxk.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = QActive_start_ &rArr; QXK_activate_ &rArr; QF_gc &rArr; QMPool_put
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QXK_sched_
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Q_onAssert
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QF_set_BASEPRI
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QF_get_BASEPRI
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QEQueue_init
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QXK_activate_
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QF_add_
</UL>
<BR>[Address Reference Count : 2]<UL><LI> qf_actq.o(.constdata)
<LI> qf_qact.o(.constdata)
</UL>
<P><STRONG><a name="[13a]"></a>QXK_schedLock</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, qxk.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Q_onAssert
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QF_set_BASEPRI
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QF_get_BASEPRI
</UL>

<P><STRONG><a name="[13b]"></a>QXK_schedUnlock</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, qxk.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QXK_sched_
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Q_onAssert
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QF_set_BASEPRI
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QF_get_BASEPRI
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QXK_activate_
</UL>

<P><STRONG><a name="[13c]"></a>QXK_current</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, qxk.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Q_onAssert
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QF_set_BASEPRI
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QF_get_BASEPRI
</UL>

<P><STRONG><a name="[ac]"></a>QXSemaphore_init</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, qxk_sema.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = QXSemaphore_init
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Q_onAssert
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[7d]"></a>QXSemaphore_wait</STRONG> (Thumb, 288 bytes, Stack size 32 bytes, qxk_sema.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = QXSemaphore_wait &rArr; QXThread_teArm_
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QXK_sched_
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Q_onAssert
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QF_set_BASEPRI
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QF_get_BASEPRI
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QXThread_teArm_
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_Thread2
</UL>

<P><STRONG><a name="[140]"></a>QXSemaphore_tryWait</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, qxk_sema.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Q_onAssert
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QF_set_BASEPRI
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QF_get_BASEPRI
</UL>

<P><STRONG><a name="[7b]"></a>QXSemaphore_signal</STRONG> (Thumb, 186 bytes, Stack size 24 bytes, qxk_sema.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = QXSemaphore_signal &rArr; QXK_sched_
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QXK_sched_
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Q_onAssert
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QF_set_BASEPRI
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QF_get_BASEPRI
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QXThread_teDisarm_
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_Thread1
</UL>

<P><STRONG><a name="[ad]"></a>QXThread_ctor</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, qxk_xthr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = QXThread_ctor &rArr; QTimeEvt_ctorX
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QTimeEvt_ctorX
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QActive_ctor
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[141]"></a>QXThread_teDisarm_</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, qxk_xthr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QXSemaphore_signal
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QXThread_delayCancel
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QXThread_post_
</UL>

<P><STRONG><a name="[146]"></a>QXThread_unblock_</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, qxk_xthr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = QXThread_unblock_ &rArr; QXK_sched_
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QXK_sched_
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QXK_get_IPSR
</UL>
<BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QXThread_delayCancel
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QXThread_post_
</UL>

<P><STRONG><a name="[13f]"></a>QXThread_teArm_</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, qxk_xthr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = QXThread_teArm_
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Q_onAssert
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QXThread_delay
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QXSemaphore_wait
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QXThread_queueGet
</UL>

<P><STRONG><a name="[147]"></a>QXThread_queueGet</STRONG> (Thumb, 272 bytes, Stack size 24 bytes, qxk_xthr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QXK_sched_
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Q_onAssert
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QXK_get_IPSR
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QF_set_BASEPRI
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QF_get_BASEPRI
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QXThread_teArm_
</UL>

<P><STRONG><a name="[148]"></a>QXThread_block_</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, qxk_xthr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = QXThread_block_ &rArr; QXK_sched_
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QXK_sched_
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Q_onAssert
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QXThread_delay
</UL>

<P><STRONG><a name="[8d]"></a>QXThread_delay</STRONG> (Thumb, 180 bytes, Stack size 16 bytes, qxk_xthr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = QXThread_delay &rArr; QXThread_block_ &rArr; QXK_sched_
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Q_onAssert
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QXThread_block_
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QXK_get_IPSR
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QF_set_BASEPRI
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QF_get_BASEPRI
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QXThread_teArm_
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_Thread4
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_Thread3
</UL>

<P><STRONG><a name="[149]"></a>QXThread_delayCancel</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, qxk_xthr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QXThread_unblock_
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QF_set_BASEPRI
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QF_get_BASEPRI
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QXThread_teDisarm_
</UL>

<P><STRONG><a name="[61]"></a>QXK_threadRet_</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, qxk_xthr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = QXK_threadRet_ &rArr; QXK_sched_
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QXK_sched_
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Q_onAssert
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QXK_get_IPSR
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QF_set_BASEPRI
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QF_get_BASEPRI
</UL>
<BR>[Address Reference Count : 1]<UL><LI> qxk_port.o(.text)
</UL>
<P><STRONG><a name="[132]"></a>QXK_init</STRONG> (Thumb, 94 bytes, Stack size 0 bytes, qxk_port.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QF_init
</UL>

<P><STRONG><a name="[143]"></a>QXK_stackInit_</STRONG> (Thumb, 162 bytes, Stack size 20 bytes, qxk_port.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = QXK_stackInit_
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QXThread_start_
</UL>

<P><STRONG><a name="[e2]"></a>__rt_ctype_table</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ctype_o.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_aton
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isspace
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>

<P><STRONG><a name="[65]"></a>isspace</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, isspace_o.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = isspace
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Address Reference Count : 1]<UL><LI> scanf_char.o(.text)
</UL>
<P><STRONG><a name="[ee]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendFromSock
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WifiJoin
</UL>

<P><STRONG><a name="[1d9]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[1da]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[14a]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[1db]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[1dc]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[fa]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dummy_tx
</UL>

<P><STRONG><a name="[f5]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleRxWiFi
</UL>

<P><STRONG><a name="[1dd]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[14b]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[f8]"></a>strstr</STRONG> (Thumb, 36 bytes, Stack size 12 bytes, strstr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleRxSNIC
</UL>

<P><STRONG><a name="[85]"></a>strlen</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, strlen.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleRxSNIC
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleRxWiFi
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getTCPinfo
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WifiJoin
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_Thread2
</UL>

<P><STRONG><a name="[e4]"></a>strcpy</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, strcpy.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleRxSNIC
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleRxWiFi
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getTCPinfo
</UL>

<P><STRONG><a name="[f7]"></a>strncmp</STRONG> (Thumb, 30 bytes, Stack size 12 bytes, strncmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleRxSNIC
</UL>

<P><STRONG><a name="[e6]"></a>__0scanf</STRONG> (Thumb, 26 bytes, Stack size 56 bytes, __0scanf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = __0scanf &rArr; __vfscanf_char_file &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_string
</UL>
<BR>[Calls]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf_char_file
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SnicGetDhcp
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setTCPinfo
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WifiJoin
</UL>

<P><STRONG><a name="[15f]"></a>_scanf_string</STRONG> (Thumb, 224 bytes, Stack size 56 bytes, _scanf_str.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _scanf_string
</UL>
<BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
</UL>

<P><STRONG><a name="[aa]"></a>strtol</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, strtol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setTCPinfo
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getTCPinfo
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>

<P><STRONG><a name="[ef]"></a>atoi</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, atoi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SnicGetDhcp
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WifiJoin
</UL>

<P><STRONG><a name="[b6]"></a>__aeabi_fadd</STRONG> (Thumb, 164 bytes, Stack size 16 bytes, fadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_frsub
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_linear_regression_beta
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_rms
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_Pcorrelation
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_autocorrelation
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_heart_rate_and_oxygen_saturation
</UL>

<P><STRONG><a name="[c2]"></a>__aeabi_fsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = __aeabi_fsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_heart_rate_and_oxygen_saturation
</UL>

<P><STRONG><a name="[c3]"></a>__aeabi_frsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = __aeabi_frsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_heart_rate_and_oxygen_saturation
</UL>

<P><STRONG><a name="[b5]"></a>__aeabi_fmul</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, fmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_fmul
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_linear_regression_beta
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_rms
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_Pcorrelation
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_autocorrelation
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_heart_rate_and_oxygen_saturation
</UL>

<P><STRONG><a name="[b8]"></a>__aeabi_fdiv</STRONG> (Thumb, 124 bytes, Stack size 8 bytes, fdiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_fdiv
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_linear_regression_beta
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_rms
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_Pcorrelation
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_signal_periodicity
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_autocorrelation
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_heart_rate_and_oxygen_saturation
</UL>

<P><STRONG><a name="[c7]"></a>__aeabi_dadd</STRONG> (Thumb, 322 bytes, Stack size 48 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_heart_rate_and_oxygen_saturation
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;maxim_max30102_read_temp
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[155]"></a>__aeabi_dsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[156]"></a>__aeabi_drsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[c6]"></a>__aeabi_dmul</STRONG> (Thumb, 228 bytes, Stack size 48 bytes, dmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_heart_rate_and_oxygen_saturation
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;maxim_max30102_read_temp
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[c4]"></a>__aeabi_ddiv</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, ddiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_heart_rate_and_oxygen_saturation
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[b7]"></a>__aeabi_i2f</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fflti.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_i2f &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_rms
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_Pcorrelation
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_autocorrelation
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_heart_rate_and_oxygen_saturation
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;maxim_max30102_read_temp
</UL>

<P><STRONG><a name="[c1]"></a>__aeabi_ui2f</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ffltui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_ui2f &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_heart_rate_and_oxygen_saturation
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;maxim_max30102_read_temp
</UL>

<P><STRONG><a name="[82]"></a>__aeabi_f2d</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, f2d.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_rms
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_heart_rate_and_oxygen_saturation
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;maxim_max30102_read_temp
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_Thread2
</UL>

<P><STRONG><a name="[1de]"></a>__aeabi_cdcmpeq</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, cdcmple.o(.text), UNUSED)

<P><STRONG><a name="[83]"></a>__aeabi_cdcmple</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cdcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_heart_rate_and_oxygen_saturation
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_Thread2
</UL>

<P><STRONG><a name="[c5]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cdrcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_heart_rate_and_oxygen_saturation
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[bf]"></a>__aeabi_d2f</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, d2f.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_d2f
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_rms
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_heart_rate_and_oxygen_saturation
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;maxim_max30102_read_temp
</UL>

<P><STRONG><a name="[1df]"></a>__aeabi_cfcmpeq</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, cfcmple.o(.text), UNUSED)

<P><STRONG><a name="[bb]"></a>__aeabi_cfcmple</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, cfcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_linear_regression_beta
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_signal_periodicity
</UL>

<P><STRONG><a name="[ba]"></a>__aeabi_cfrcmple</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, cfrcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_signal_periodicity
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_heart_rate_and_oxygen_saturation
</UL>

<P><STRONG><a name="[1e0]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[166]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[157]"></a>__aeabi_uldivmod</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, uldiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[151]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>

<P><STRONG><a name="[1e1]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[152]"></a>__aeabi_lasr</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, llsshr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[1e2]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[14d]"></a>_strtoul</STRONG> (Thumb, 158 bytes, Stack size 40 bytes, _strtoul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_chval
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>

<P><STRONG><a name="[14c]"></a>__vfscanf_char_file</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, scanf_char_file.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = __vfscanf_char_file &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_string
</UL>
<BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf_char
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0scanf
</UL>

<P><STRONG><a name="[1e3]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[150]"></a>_float_round</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fepilogue.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>

<P><STRONG><a name="[14f]"></a>_float_epilogue</STRONG> (Thumb, 92 bytes, Stack size 4 bytes, fepilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = _float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>

<P><STRONG><a name="[154]"></a>_double_round</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[153]"></a>_double_epilogue</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[15b]"></a>_dsqrt</STRONG> (Thumb, 162 bytes, Stack size 32 bytes, dsqrt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _dsqrt &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
</UL>

<P><STRONG><a name="[15c]"></a>__aeabi_d2ulz</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, dfixul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[77]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[1e4]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[1e5]"></a>_fgetc$bs</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, fgetc_b.o(.text), UNUSED)

<P><STRONG><a name="[63]"></a>__backspace</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fgetc_b.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> scanf_char_file.o(.text)
</UL>
<P><STRONG><a name="[158]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>

<P><STRONG><a name="[1e6]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[159]"></a>_chval</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, _chval.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
</UL>

<P><STRONG><a name="[15a]"></a>__vfscanf_char</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, scanf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = __vfscanf_char &rArr; __vfscanf &rArr; _scanf_string
</UL>
<BR>[Calls]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
</UL>
<BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf_char_file
</UL>

<P><STRONG><a name="[1e7]"></a>__semihosting_library_function</STRONG> (Thumb, 0 bytes, Stack size 88 bytes, semi.o(.text), UNUSED)

<P><STRONG><a name="[15e]"></a>__vfscanf</STRONG> (Thumb, 808 bytes, Stack size 88 bytes, _scanf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = __vfscanf &rArr; _scanf_string
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_string
</UL>
<BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf_char
</UL>

<P><STRONG><a name="[1e8]"></a>__I$use$semihosting$fgetc</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, iusesemig.o(.text), UNUSED)

<P><STRONG><a name="[1e9]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[1ea]"></a>__decompress1</STRONG> (Thumb, 86 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[160]"></a>__0printf</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[1eb]"></a>__1printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[89]"></a>__2printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleRxSNIC
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleRxWiFi
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpCreateConnection
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;closeSocket
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SnicGetDhcp
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SnicCleanup
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ApOnOff
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WifiOff
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setTCPinfo
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitSR1FlagsSet
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpCreateSocket
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpConnectToServer
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;maxim_max30102_reset
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getTCPinfo
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WifiOn
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WifiJoin
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WifiDisconn
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SnicInit
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SnicIPConfig
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_Thread4
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_Thread3
</UL>

<P><STRONG><a name="[87]"></a>__c89printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __c89printf
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_Thread2
</UL>

<P><STRONG><a name="[1ec]"></a>printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[162]"></a>__0sprintf</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[1ed]"></a>__1sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[84]"></a>__2sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleRxSNIC
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleRxWiFi
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getTCPinfo
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WifiJoin
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_Thread2
</UL>

<P><STRONG><a name="[1ee]"></a>__c89sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[1ef]"></a>sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[14e]"></a>__aeabi_errno_addr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, errno.o(i.__aeabi_errno_addr))
<BR><BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>

<P><STRONG><a name="[1f0]"></a>__rt_errno_addr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, errno.o(i.__aeabi_errno_addr), UNUSED)

<P><STRONG><a name="[1f1]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[1f2]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[1f3]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[167]"></a>__set_errno</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, errno.o(i.__set_errno))
<BR><BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
</UL>

<P><STRONG><a name="[be]"></a>sqrt</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, sqrt.o(i.sqrt))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = sqrt &rArr; _dsqrt &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_rms
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_heart_rate_and_oxygen_saturation
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[cd]"></a>WaitLineIdle</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, max30102.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RdBuf
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WrData
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RdBufEasy
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WrBuf
</UL>

<P><STRONG><a name="[c8]"></a>WaitSR1FlagsSet</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, max30102.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = WaitSR1FlagsSet &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RdData
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RdBuf
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WrData
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WrBuf
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Read
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Start
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Addr
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Write
</UL>

<P><STRONG><a name="[c9]"></a>I2C_Write</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, max30102.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = I2C_Write &rArr; WaitSR1FlagsSet &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitSR1FlagsSet
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WrBuf
</UL>

<P><STRONG><a name="[ca]"></a>I2C_Addr</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, max30102.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = I2C_Addr &rArr; WaitSR1FlagsSet &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitSR1FlagsSet
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RdData
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RdBuf
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WrData
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RdBufEasy
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WrBuf
</UL>

<P><STRONG><a name="[cb]"></a>I2C_Start</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, max30102.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = I2C_Start &rArr; WaitSR1FlagsSet &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitSR1FlagsSet
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RdData
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RdBuf
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WrData
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RdBufEasy
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WrBuf
</UL>

<P><STRONG><a name="[cf]"></a>I2C_Read</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, max30102.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = I2C_Read &rArr; WaitSR1FlagsSet &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitSR1FlagsSet
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RdBuf
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RdBufEasy
</UL>

<P><STRONG><a name="[da]"></a>QF_get_BASEPRI</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, bsp.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_ledRedToggle
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_ledOrangeToggle
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_ledGreenToggle
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_ledBlueToggle
</UL>

<P><STRONG><a name="[d8]"></a>QF_set_BASEPRI</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, bsp.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_ledRedToggle
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_ledOrangeToggle
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_ledGreenToggle
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_ledBlueToggle
</UL>

<P><STRONG><a name="[fb]"></a>escape_payload_and_transmit_no_ESC</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, sn8200_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = escape_payload_and_transmit_no_ESC &rArr; dummy_tx &rArr; SN8200_HAL_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dummy_tx
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;no_ESC_transmit
</UL>

<P><STRONG><a name="[100]"></a>calc_escaped_payload_len_no_ESC</STRONG> (Thumb, 42 bytes, Stack size 12 bytes, sn8200_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = calc_escaped_payload_len_no_ESC
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_transmit
</UL>

<P><STRONG><a name="[fc]"></a>no_ESC_transmit</STRONG> (Thumb, 124 bytes, Stack size 32 bytes, sn8200_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = no_ESC_transmit &rArr; escape_payload_and_transmit_no_ESC &rArr; dummy_tx &rArr; SN8200_HAL_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dummy_tx
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;escape_payload_and_transmit_no_ESC
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_transmit
</UL>

<P><STRONG><a name="[10c]"></a>SetSysClock</STRONG> (Thumb, 220 bytes, Stack size 12 bytes, system_stm32f4xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SetSysClock
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[10e]"></a>QHsm_tran_</STRONG> (Thumb, 338 bytes, Stack size 32 bytes, qep_hsm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = QHsm_tran_
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Q_onAssert
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QHsm_dispatch_
</UL>

<P><STRONG><a name="[112]"></a>QF_set_BASEPRI</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, qf_act.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QF_remove_
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QF_add_
</UL>

<P><STRONG><a name="[6a]"></a>QTicker_init_</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, qf_actq.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> qf_actq.o(.constdata)
</UL>
<P><STRONG><a name="[6b]"></a>QTicker_dispatch_</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, qf_actq.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = QTicker_dispatch_ &rArr; QF_tickX_
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QF_tickX_
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QF_set_BASEPRI
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QF_get_BASEPRI
</UL>
<BR>[Address Reference Count : 1]<UL><LI> qf_actq.o(.constdata)
</UL>
<P><STRONG><a name="[6d]"></a>QTicker_post_</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, qf_actq.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = QTicker_post_ &rArr; QXK_activate_ &rArr; QF_gc &rArr; QMPool_put
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QXK_sched_
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QXK_activate_
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QF_set_BASEPRI
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QF_get_BASEPRI
</UL>
<BR>[Address Reference Count : 1]<UL><LI> qf_actq.o(.constdata)
</UL>
<P><STRONG><a name="[6e]"></a>QTicker_postLIFO_</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, qf_actq.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = QTicker_postLIFO_
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Q_onAssert
</UL>
<BR>[Address Reference Count : 1]<UL><LI> qf_actq.o(.constdata)
</UL>
<P><STRONG><a name="[114]"></a>QF_get_BASEPRI</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, qf_actq.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QF_getQueueMin
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QActive_get_
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QActive_postLIFO_
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QActive_post_
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QTicker_post_
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QTicker_dispatch_
</UL>

<P><STRONG><a name="[115]"></a>QF_set_BASEPRI</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, qf_actq.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QF_getQueueMin
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QActive_get_
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QActive_postLIFO_
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QActive_post_
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QTicker_post_
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QTicker_dispatch_
</UL>

<P><STRONG><a name="[11f]"></a>QF_set_BASEPRI</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, qf_dyn.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QF_newRef_
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QF_gc
</UL>

<P><STRONG><a name="[123]"></a>QF_set_BASEPRI</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, qf_mem.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QF_getPoolMin
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QMPool_put
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QMPool_get
</UL>

<P><STRONG><a name="[128]"></a>QF_set_BASEPRI</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, qf_qeq.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QEQueue_postLIFO
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QEQueue_post
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QEQueue_get
</UL>

<P><STRONG><a name="[12b]"></a>QF_get_BASEPRI</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, qf_time.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QF_tickX_
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QTimeEvt_currCtr
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QTimeEvt_rearm
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QTimeEvt_disarm
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QTimeEvt_armX
</UL>

<P><STRONG><a name="[12c]"></a>QF_set_BASEPRI</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, qf_time.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QF_tickX_
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QTimeEvt_currCtr
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QTimeEvt_rearm
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QTimeEvt_disarm
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QTimeEvt_armX
</UL>

<P><STRONG><a name="[136]"></a>initial_events</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, qxk.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = initial_events &rArr; QXK_activate_ &rArr; QF_gc &rArr; QMPool_put
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QXK_sched_
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QXK_activate_
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QF_run
</UL>

<P><STRONG><a name="[139]"></a>QF_get_BASEPRI</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, qxk.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QXK_current
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QXK_schedUnlock
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QXK_schedLock
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QActive_start_
</UL>

<P><STRONG><a name="[135]"></a>QF_set_BASEPRI</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, qxk.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QF_run
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QXK_current
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QXK_schedUnlock
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QXK_schedLock
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QXK_activate_
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QActive_start_
</UL>

<P><STRONG><a name="[13d]"></a>QF_get_BASEPRI</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, qxk_sema.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QXSemaphore_wait
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QXSemaphore_signal
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QXSemaphore_tryWait
</UL>

<P><STRONG><a name="[13e]"></a>QF_set_BASEPRI</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, qxk_sema.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QXSemaphore_wait
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QXSemaphore_signal
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QXSemaphore_tryWait
</UL>

<P><STRONG><a name="[71]"></a>QXThread_init_</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, qxk_xthr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = QXThread_init_
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Q_onAssert
</UL>
<BR>[Address Reference Count : 1]<UL><LI> qxk_xthr.o(.constdata)
</UL>
<P><STRONG><a name="[72]"></a>QXThread_dispatch_</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, qxk_xthr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = QXThread_dispatch_
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Q_onAssert
</UL>
<BR>[Address Reference Count : 1]<UL><LI> qxk_xthr.o(.constdata)
</UL>
<P><STRONG><a name="[73]"></a>QXThread_start_</STRONG> (Thumb, 158 bytes, Stack size 40 bytes, qxk_xthr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = QXThread_start_ &rArr; QXK_stackInit_
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QXK_sched_
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Q_onAssert
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QXK_stackInit_
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QXK_get_IPSR
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QF_set_BASEPRI
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QF_get_BASEPRI
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QEQueue_init
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QF_add_
</UL>
<BR>[Address Reference Count : 1]<UL><LI> qxk_xthr.o(.constdata)
</UL>
<P><STRONG><a name="[74]"></a>QXThread_post_</STRONG> (Thumb, 310 bytes, Stack size 32 bytes, qxk_xthr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = QXThread_post_ &rArr; QF_gc &rArr; QMPool_put
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QXK_sched_
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Q_onAssert
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QXThread_unblock_
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QXK_get_IPSR
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QF_set_BASEPRI
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QF_get_BASEPRI
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QXThread_teDisarm_
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QF_gc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> qxk_xthr.o(.constdata)
</UL>
<P><STRONG><a name="[75]"></a>QXThread_postLIFO_</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, qxk_xthr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = QXThread_postLIFO_
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Q_onAssert
</UL>
<BR>[Address Reference Count : 1]<UL><LI> qxk_xthr.o(.constdata)
</UL>
<P><STRONG><a name="[144]"></a>QF_get_BASEPRI</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, qxk_xthr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QXThread_delay
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QXK_threadRet_
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QXThread_delayCancel
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QXThread_queueGet
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QXThread_post_
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QXThread_start_
</UL>

<P><STRONG><a name="[145]"></a>QF_set_BASEPRI</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, qxk_xthr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QXThread_delay
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QXK_threadRet_
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QXThread_delayCancel
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QXThread_queueGet
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QXThread_post_
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QXThread_start_
</UL>

<P><STRONG><a name="[142]"></a>QXK_get_IPSR</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, qxk_xthr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QXThread_delay
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QXK_threadRet_
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QXThread_queueGet
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QXThread_unblock_
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QXThread_post_
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QXThread_start_
</UL>

<P><STRONG><a name="[163]"></a>_fp_digits</STRONG> (Thumb, 366 bytes, Stack size 64 bytes, printfa.o(i._fp_digits), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>
<BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[161]"></a>_printf_core</STRONG> (Thumb, 1744 bytes, Stack size 136 bytes, printfa.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>
<BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0printf
</UL>

<P><STRONG><a name="[165]"></a>_printf_post_padding</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, printfa.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[164]"></a>_printf_pre_padding</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, printfa.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[67]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, printfa.o(i._sputc))
<BR><BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printfa.o(i.__0sprintf)
</UL>
<P><STRONG><a name="[64]"></a>_scanf_char_input</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, scanf_char.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> scanf_char.o(.text)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
